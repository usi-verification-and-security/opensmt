(set-option :produce-unsat-cores true)
(set-logic QF_LIA)
(declare-fun x49 () Int)
(declare-fun x60 () Int)
(declare-fun x1 () Bool)
(declare-fun x50 () Bool)
(declare-fun x46 () Int)
(declare-fun x53 () Int)
(declare-fun x68 () Bool)
(declare-fun x40 () Bool)
(declare-fun x63 () Int)
(declare-fun x27 () Int)
(declare-fun x18 () Bool)
(declare-fun x62 () Int)
(declare-fun x9 () Bool)
(declare-fun x35 () Bool)
(declare-fun x29 () Bool)
(declare-fun x25 () Bool)
(declare-fun x36 () Int)
(declare-fun x11 () Bool)
(declare-fun x34 () Bool)
(declare-fun x21 () Bool)
(declare-fun x69 () Bool)
(declare-fun x57 () Bool)
(declare-fun x44 () Bool)
(declare-fun x13 () Int)
(declare-fun x37 () Bool)
(declare-fun x59 () Int)
(declare-fun x12 () Int)
(declare-fun x70 () Bool)
(declare-fun x47 () Int)
(declare-fun x51 () Int)
(declare-fun x26 () Int)
(declare-fun x61 () Bool)
(declare-fun x58 () Int)
(declare-fun x48 () Bool)
(declare-fun x39 () Bool)
(declare-fun x17 () Bool)
(declare-fun x15 () Int)
(declare-fun x56 () Int)
(declare-fun x16 () Bool)
(declare-fun x65 () Bool)
(declare-fun x31 () Int)
(declare-fun x4 () Int)
(declare-fun x43 () Bool)
(declare-fun x66 () Bool)
(declare-fun x30 () Int)
(declare-fun x45 () Bool)
(declare-fun x28 () Bool)
(declare-fun x54 () Bool)
(declare-fun x64 () Int)
(declare-fun x23 () Bool)
(declare-fun x6 () Bool)
(assert (! (>= 7 x64) :named smtcomp1))
(assert (! (>= 7 x15) :named smtcomp2))
(assert (! (<= 0 x49) :named smtcomp3))
(assert (! (>= x64 0) :named smtcomp4))
(assert (! (<= 0 x63) :named smtcomp5))
(assert (! (<= x47 7) :named smtcomp6))
(assert (! (>= 7 x62) :named smtcomp7))
(assert (! (<= x26 1) :named smtcomp8))
(assert (! (>= 7 x51) :named smtcomp9))
(assert (! (<= x12 7) :named smtcomp10))
(assert (! (<= x36 1) :named smtcomp11))
(assert (! (<= x49 7) :named smtcomp12))
(assert (! (>= x4 0) :named smtcomp13))
(assert (! (<= x31 255) :named smtcomp14))
(assert (! (>= x31 0) :named smtcomp21))
(declare-fun x2 () Int)
(declare-fun x67 () Bool)
(assert (! (let ((x20 (not x39)) (x22 (not x25))) (let ((x41 (not (not x45))) (x52 (not x34)) (x8 (not (ite x22 false (ite (not x66) (or x23 (or x44 x70)) false)))) (x42 (not x6))) (let ((x55 (ite x52 0 (ite x42 x60 x47))) (x5 (not (not x18)))) (let ((x14 (not (not x69))) (x7 (ite x5 x55 (ite x52 0 (ite x42 x47 x62)))) (x24 (ite (not (not x68)) x55 (ite x52 0 (ite x42 x13 x51))))) (let ((x38 (ite x14 x55 (ite x52 0 (ite x42 x58 x60)))) (x19 (ite (not (not x61)) x55 (ite x52 0 (ite x42 x64 x59))))) (let ((x3 (not (not (or (not (ite x41 (ite x8 (ite x22 x43 (ite x20 (not (= (ite (not (not x48)) 0 (+ (ite (and x65 (and x29 x40)) 1 0) (+ (+ (ite (and (> 0 (ite (< x46 4) x46 (- x46 8))) (and x29 x54)) 1 0) (+ (+ (ite (< x27 0) 1 0) (+ (ite (and x54 (< (ite (< x63 4) x63 (- x63 8)) 0)) 1 0) (+ (+ (ite (and (> 0 (ite (> 4 x49) x49 (- x49 8))) (and x1 x54)) 1 0) (ite (and (> 0 x26) x1) 1 0)) (ite (and x50 (and x40 x1)) 1 0)))) (ite (and x9 x40) 1 0))) (ite (and x29 (> 0 x36)) 1 0)))) 0)) x43)) x43) false)) (not (ite x41 (ite x8 (ite x22 x16 (ite x20 x28 x16)) x16) false)))))) (x32 (ite (not (not (or x48 (not x28)))) x30 x31)) (x10 (= 92 (+ (+ (ite (> x24 x53) 128 0) (+ (+ (+ (ite (> x55 x53) 16 0) (+ (ite (< x53 x38) 8 0) (+ (+ (ite (> (ite (not (not x17)) x38 (ite x14 x19 (ite x52 0 (ite x42 x12 x64)))) x53) 1 0) (ite (< x53 x19) 2 0)) (ite (> (ite (not (not x11)) x7 (ite x5 x19 (ite x52 0 (ite x42 x59 x56)))) x53) 4 0)))) (ite (> x7 x53) 32 0)) (ite (> (ite (not (not x35)) x38 (ite x14 x24 (ite x52 0 (ite x42 x4 x13)))) x53) 64 0))) (ite (< x53 (ite (not (not x57)) x7 (ite x5 x24 (ite x52 0 (ite x42 x51 x15))))) 256 0)))) (x33 (ite (not (not (or (not x16) (not x43)))) x37 x21))) (= (- (ite (ite x3 false (ite x41 (ite x8 (ite x22 x21 (ite x20 (and x10 (> 0 (ite (< x31 128) x31 (- x31 256)))) x21)) x21) false)) 1 0) (ite (ite x3 false (ite x41 (ite x8 (ite x22 x33 (ite x20 (and x10 (> 0 (ite (< x32 128) x32 (- x32 256)))) x33)) x33) false)) 1 0)) (+ (* 2 x2) 1)))))))) :named smtcomp43))
(check-sat)
(get-unsat-core)
(exit)
